
"""
This script is a Flask application that provides functionalities for managing PDF files.
It allows users to upload files, retrieve files from cloud storage services (Google Drive and OneDrive),
parse different file types (PDF, DOCX, and images), perform NLP analysis on text, and perform web searches.

The main endpoints of the application are:
- /upload: Allows users to upload files to the server.
- /files: Retrieves files from cloud storage services.
- /parse: Parses different file types (PDF, DOCX, and images) and returns the extracted text.
- /nlp: Performs NLP analysis on text and returns the extracted keywords.
- /search: Performs a web search based on a query and returns the search results.

The application uses the following libraries:
- os: Provides functions for interacting with the operating system.
- flask: A micro web framework for building web applications.
- oauth2client: Provides authentication for Google Drive.
- googleapiclient: Provides access to Google Drive API.
- onedrivesdk: Provides authentication for OneDrive.
- PyPDF2: Allows reading and manipulating PDF files.
- docx: Allows reading and manipulating DOCX files.
- PIL: Provides image processing capabilities.
- spacy: A natural language processing library.
- requests: Allows making HTTP requests.
- werkzeug: Provides utilities for handling file uploads.
- pytesseract: Allows extracting text from images using OCR.

To run the application, execute the script and access the endpoints using a web browser or API client.
"""
import os
from flask import Flask, request, jsonify, abort
from oauth2client import client, tools, file
from googleapiclient.discovery import build
from onedrivesdk import AuthProvider, Session, HttpProvider, OneDriveClient
from PyPDF2 import PdfReader
from docx import Document
from PIL import Image
import spacy
import requests
from werkzeug.utils import secure_filename
from pytesseract import image_to_string
from flask import Flask, request, jsonify
from rasa.core.agent import Agent
from rasa.core.interpreter import RasaNLUInterpreter

app = Flask(__name__)

# Load trained Rasa model
interpreter = RasaNLUInterpreter('models/nlu')
agent = Agent.load('models/dialogue', interpreter=interpreter)

@app.route("/converse", methods=["POST"])
def converse():
    # Get the message from the POST data
    message = request.json["message"]

    # Use the Rasa agent to handle the message
    responses = agent.handle_text(message)

    # Return the bot's responses
    return jsonify(responses)

if __name__ == "__main__":
    app.run(debug=True)

# Import necessary libraries

# Initialize Flask app and NLP model
app = Flask(__name__)
nlp = spacy.load("en_core_web_sm")

# Set up configuration for file uploads
UPLOAD_FOLDER = '/path/to/the/uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 700 * 1024 * 1024  # 700MB upload limit

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'docx'}
# Function to check allowed file types
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Error handling for unauthorized access
@app.errorhandler(401)
def unauthorized(error):
    return jsonify(error="Unauthorized access"), 401

# Error handling for forbidden access
@app.errorhandler(403)
def forbidden(error):
    return jsonify(error="Forbidden access"), 403

# Error handling for not found
@app.errorhandler(404)
def not_found(error):
    return jsonify(error="Resource not found"), 404

# Error handling for server errors
@app.errorhandler(500)
def server_error(error):
    return jsonify(error="Internal server error"), 500

# Authentication for Google Drive
SCOPE = 'https://www.googleapis.com/auth/drive'

def google_drive_auth():
    # Check if credentials file exists
    if not os.path.exists('credentials.json'):
        raise FileNotFoundError("Credentials file not found")
    
    # Load the credentials from a file
    credentials = file.Storage('credentials.json').get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets('client_secrets.json', SCOPE)
        store = file.Storage('token.json')
        credentials = tools.run_flow(flow, store)
    service = build('drive', 'v3', credentials=credentials)
    return service

# Authentication for OneDrive
def onedrive_auth():
    http_provider = HttpProvider()
    auth_provider = AuthProvider(http_provider=http_provider,
                                 client_id='your_client_id',
                                 scopes=['wl.signin', 'wl.offline_access', 'onedrive.readwrite'])
    auth_provider.authenticate(code='user_code', redirect_uri='http://localhost:8080')
    client = OneDriveClient('https://api.onedrive.com/v1.0', auth_provider, http_provider)
    return client

# File retrieval from cloud storage
def get_files(service, service_name):
    if service_name == 'google_drive':
        results = service.files().list(pageSize=10, fields="nextPageToken, files(id, name)").execute()
        items = results.get('files', [])
        return items
    elif service_name == 'onedrive':
        items = service.item(drive='me', id='root').children.get()
        return items

# File retrieval from device's internal storage
@app.route('/upload', methods=['POST'])
def upload_file():
    # Check if the post request has the file part
    if 'file' not in request.files:
        abort(400, "No file part in the request")
    file = request.files['file']
    # If user does not select file, browser also
    # submit an empty part without filename
    if file.filename == '':
        abort(400, "No selected file")
    if file and allowed_file(file.filename):
        try:
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            return jsonify(message="File uploaded successfully", file_path=file_path)
        except Exception as e:
            abort(500, str(e))
    else:
        abort(400, "Unsupported file type")

# Document parsing functions
def parse_pdf(file_path):
    # Open the PDF file
    with open(file_path, 'rb') as f:
        reader = PdfReader(f)
        text = ""
        # Extract text from each page
        for page in reader.pages:
            text += page.extract_text() + "\n"
    return text

def parse_docx(file_path):
    # Open the DOCX file
    doc = Document(file_path)
    text = ""
    # Extract text from each paragraph
    for para in doc.paragraphs:
        text += para.text + "\n"
    return text

def parse_image(file_path):
    text = image_to_string(Image.open(file_path))
    return text

# Web search function
def web_search(query):
    def web_search(query):
        url = "https://api.duckduckgo.com/"
        params = {
            'q': query,
            'format': 'json'
        }
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code
            return response.json()
        except requests.RequestException as e:
            return f"An error occurred: {e}"

# NLP analysis function
# Load trained Rasa model
interpreter = RasaNLUInterpreter('models/nlu')
agent = Agent.load('models/dialogue', interpreter=interpreter)

@app.route("/converse", methods=["POST"])
def converse():
    # Get the message from the POST data
    message = request.json["message"]

    # Use the Rasa agent to handle the message
    responses = agent.handle_text(message)

    # Return the bot's responses
    return jsonify(responses)


# Main function to start the Flask app
if __name__ == '__main__':
    app.run(debug=True)
